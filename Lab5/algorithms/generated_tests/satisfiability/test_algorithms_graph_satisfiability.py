# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.graph.satisfiability as module_0


@pytest.mark.xfail(strict=True)
def test_case_0():
    float_0 = -602.34
    module_0.scc(float_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = ")Si:bZwC"
    module_0.add_edge(str_0, str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    dict_0 = {}
    module_0.scc(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"3\xc8\x16\xb7\x99>\xd2\x95\xf9q\x14\x8f8\xeb"
    module_0.solve_sat(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ")Si:bZwC"
    module_0.solve_sat(str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\x13\xa6+\xdc\xf6\x04\x04B[\x8b"
    module_0.scc(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    tuple_0 = ()
    module_0.add_edge(tuple_0, tuple_0, tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    tuple_0 = ()
    module_0.solve_sat(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    module_0.solve_sat(list_0)


def test_case_9():
    tuple_0 = ()
    var_0 = module_0.build_graph(tuple_0)
    var_1 = module_0.dfs(tuple_0, var_0, var_0, var_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    dict_0 = {}
    list_0 = [dict_0, dict_0]
    list_1 = [list_0, list_0, dict_0, list_0, dict_0, list_0, list_0]
    list_2 = [list_1, list_0, list_0]
    module_0.solve_sat(list_2)


@pytest.mark.xfail(strict=True)
def test_case_11():
    tuple_0 = ()
    var_0 = module_0.build_graph(tuple_0)
    var_1 = module_0.dfs(tuple_0, tuple_0, var_0, var_0, var_0)
    str_0 = "2RtuS\nCA>X$um"
    var_2 = module_0.dfs(str_0, var_0, var_0, var_0, var_0)
    module_0.build_graph(var_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    tuple_0 = ()
    var_0 = module_0.build_graph(tuple_0)
    var_1 = module_0.build_graph(tuple_0)
    var_2 = module_0.dfs(tuple_0, var_1, var_0, var_0, var_1)
    module_0.dfs_transposed(tuple_0, var_0, var_1, var_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"\xa2\xf1"
    dict_0 = {bytes_0: bytes_0, bytes_0: bytes_0, bytes_0: bytes_0}
    tuple_0 = (dict_0,)
    module_0.build_graph(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    tuple_0 = ()
    var_0 = module_0.build_graph(tuple_0)
    var_1 = module_0.build_graph(var_0)
    var_2 = module_0.dfs(tuple_0, var_1, var_0, var_0, var_1)
    var_3 = module_0.dfs(var_2, tuple_0, var_1, var_1, var_0)
    module_0.dfs_transposed(tuple_0, var_0, var_2, var_1)
