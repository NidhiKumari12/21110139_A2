# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import algorithms.dp.num_decodings as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bytes_0 = b"\xfb\xd0\xfd\x85\x1a\x96\xb3\xc9\xd7\xdec\x10S\xe8\xc6b&"
    module_0.num_decodings(bytes_0)


def test_case_1():
    none_type_0 = None
    var_0 = module_0.num_decodings(none_type_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(none_type_0)
    assert var_1 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    complex_0 = 2158.45796 - 1797.448j
    module_0.num_decodings2(complex_0)


def test_case_3():
    none_type_0 = None
    var_0 = module_0.num_decodings2(none_type_0)
    assert var_0 == 0


def test_case_4():
    str_0 = ","
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1


def test_case_5():
    str_0 = ","
    var_0 = module_0.num_decodings(str_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\n        Find sign in tree\n        :param bit:\n        :return: True if sign is found\n        "
    module_0.num_decodings2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "253X5yAD<2Trz3_j9MJ7"
    module_0.num_decodings(str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "33\x0bZq="
    module_0.num_decodings2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = "0|n~ 6V=XeXO"
    var_0 = module_0.num_decodings(str_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(str_0)
    assert var_1 == 0
    var_2 = module_0.num_decodings(var_1)
    assert var_2 == 0
    var_3 = module_0.num_decodings(str_0)
    int_0 = 193
    var_4 = module_0.num_decodings2(str_0)
    assert var_4 == 0
    module_0.num_decodings(int_0)


def test_case_10():
    str_0 = ".0"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = "253X5yAD<2Trz3_j9MJ7"
    module_0.num_decodings2(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = ".0"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 1
    module_0.num_decodings(str_0)


def test_case_13():
    str_0 = "O0"
    var_0 = module_0.num_decodings2(str_0)
    assert var_0 == 0
    var_1 = module_1.object()


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "\\"
    var_0 = module_0.num_decodings(str_0)
    assert var_0 == 1
    dict_0 = {}
    var_1 = module_0.num_decodings2(dict_0)
    assert var_1 == 0
    var_2 = module_0.num_decodings(dict_0)
    assert var_2 == 0
    str_1 = "+0\x0c6"
    var_3 = module_0.num_decodings(str_0)
    assert var_3 == 1
    var_4 = module_0.num_decodings2(str_1)
    assert var_4 == 1
    var_5 = module_0.num_decodings(str_1)
    assert var_5 == 2
    module_1.object(*var_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    dict_0 = {}
    var_0 = module_0.num_decodings2(dict_0)
    assert var_0 == 0
    var_1 = module_0.num_decodings(dict_0)
    assert var_1 == 0
    str_0 = ".00\x0c6"
    var_2 = module_1.object()
    var_3 = module_0.num_decodings2(str_0)
    assert var_3 == 0
    var_4 = module_1.object()
    module_1.object(*var_0)
